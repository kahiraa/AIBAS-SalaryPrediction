import os
import pandas as pd
import numpy as np
import statsmodels.api as sm
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

TRAIN_PATH = "data/training_data.csv"
TEST_PATH = "data/test_data.csv"
OUTPUT_DIR = "documentation"

os.makedirs(OUTPUT_DIR, exist_ok=True)

train_df = pd.read_csv(TRAIN_PATH)
test_df = pd.read_csv(TEST_PATH)

X_train = train_df.drop('Salary', axis=1)
Y_train = train_df['Salary']

X_test = test_df.drop('Salary', axis=1)
Y_test = test_df['Salary']

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

X_train_scaled_ols = sm.add_constant(X_train_scaled)
X_test_scaled_ols = sm.add_constant(X_test_scaled)

# Create and fit the OLS model
ols_model = sm.OLS(Y_train, X_train_scaled_ols)
ols_results = ols_model.fit()

print(ols_results.summary())

with open(os.path.join(OUTPUT_DIR, "ols_model_summary.txt"), "w") as f:
    f.write(ols_results.summary().as_text())

# Predict with OLS model
ols_predictions = ols_results.predict(X_test_scaled_ols)

# Performance metrics for OLS model
ols_mae = mean_absolute_error(Y_test, ols_predictions)
ols_mse = mean_squared_error(Y_test, ols_predictions)
ols_r2 = r2_score(Y_test, ols_predictions)
ols_rmse = np.sqrt(ols_mse)

with open(os.path.join(OUTPUT_DIR, "ols_performance.txt"), "w") as f:
    f.write(f"OLS Model Performance:\n")
    f.write(f"Mean Absolute Error (MAE): {ols_mae}\n")
    f.write(f"Mean Squared Error (MSE): {ols_mse}\n")
    f.write(f"R-squared (R²): {ols_r2}\n")
    f.write(f"Root Mean Squared Error (RMSE): {ols_rmse}\n")

# Scatter plot for OLS model predictions vs actual values
plt.figure(figsize=(8,6))
sns.regplot(x=Y_test, y=ols_predictions, line_kws={'color': 'red'})
plt.xlabel('Actual Salary')
plt.ylabel('Predicted Salary (OLS)')
plt.title('Actual vs Predicted Salary (OLS)')
plt.savefig(os.path.join(OUTPUT_DIR, "ols_scatter_plot.png"))
plt.show()

ai_mae = 0.0589746665079604 
ai_mse = 0.006109062074033598 
ai_r2 = 0.8638659198653109  
ai_rmse = np.sqrt(ai_mse)

# Compare AI and OLS model metrics
with open(os.path.join(OUTPUT_DIR, "models_comparison_report.txt"), "w") as f:
    f.write(f"AI Model vs OLS Model Comparison:\n")
    f.write(f"AI Model - MAE: {ai_mae}, MSE: {ai_mse}, R²: {ai_r2}, RMSE: {ai_rmse}\n")
    f.write(f"OLS Model - MAE: {ols_mae}, MSE: {ols_mse}, R²: {ols_r2}, RMSE: {ols_rmse}\n")
